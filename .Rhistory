acs_out %>%
ggplot(aes(TripDuration)) +
geom_histogram(),
acs_out %>%
ggplot(aes(FlyingCompanion)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTripsLastYear)) +
geom_histogram(),
acs_out %>%
ggplot(aes(Airfare)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTransport)) +
geom_histogram(),
acs_out %>%
ggplot(aes(AccessCost)) +
geom_histogram(),
acs_out %>%
ggplot(aes(AccessTime)) +
geom_histogram(),
ncol = 2
)
# Correlation plot
cor_plot <- acs_out %>%
select(TripDuration, FlyingCompanion, NoTripsLastYear, NoTransport, Airfare, AccessCost, AccessTime)
cor_plot %>%
ggpairs()
# airline with all numerical variables
airline_num <- acs_al %>%
group_by(Airline) %>%
summarise(count = n(),
mean_tripdu = mean(TripDuration),
mean_flycom = mean(FlyingCompanion),
mean_notrip = mean(NoTripsLastYear),
mean_airfare = mean(Airfare),
mean_noTrans = mean(NoTransport),
mean_accessc = mean(AccessCost),
mean_accesst = mean(AccessTime)
) %>%
arrange(desc(count))
airline_num
airline_num_table <- kable(airline_num) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
airline_num_table
# airport with all numerical variables
airport_num <- acs_ap %>%
group_by(Airport) %>%
summarise(count = n(),
mean_tripdu = mean(TripDuration),
mean_flycom = mean(FlyingCompanion),
mean_notrip = mean(NoTripsLastYear),
mean_airfare = mean(Airfare),
mean_noTrans = mean(NoTransport),
mean_accessc = mean(AccessCost),
mean_accesst = mean(AccessTime)
) %>%
arrange(desc(count))
airport_num
airport_num_table <- kable(airport_num) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
airport_num_table
# Write CSV in R
## Airport Model data
write.csv(acs_ap, file = "acs_ap.csv")
## Airline Model data
write.csv(acs_al, file = "acs_al.csv")
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(GGally)
library(ggplot2)
library(readxl)
library(kableExtra)
library(gridExtra)
library(outliers)
library(Hmisc)
library(DMwR)
library(here)
library(dplyr)
# Load data
## CSV file
acs <- read.csv('airport_choice_survey_modified.csv')
traffic <- read.csv('traffic.csv')
# Rename columns in R
names(acs)[1]<-"ID"
# names(price)[1] <- "Airport"
# names(province)[1] <- "Airport"
# names(province)[4] <- "Travel.time.min"
# names(traffic)[1] <- "Airport"
str(acs)
summary(acs)
# Data cleaning
acs[2] <- ifelse(acs[2] == 1, 'ICN', 'GMP')
acs[3] <- ifelse(acs[3] == 1, 'Korean',
(ifelse(acs[3] == 2, 'Korean',
(ifelse(acs[3] == 3, 'Korean', 'Foreign'))))
)
acs[4] <- ifelse(acs[4] <= 50 , '<=50', '>50')
acs[7] <- ifelse(acs[7] == 1, 'Leisure', 'Business')
# Remove ID column
acs <- select(acs, -1)
# Remove unwanted variables: FlightNo, FrequentFlightDestination, DepartureHr, DepartureMn, Mileage, MileageAireline
acs <- acs[ , -c(12, 14:16, 26,27) ]
# Convert data type
acs$Age <- as.factor(acs$Age)
acs$Airport <- as.factor(acs$Airport)
acs$Airline <- as.factor(acs$Airline)
acs$Gender <- as.factor(acs$Gender)
acs$Nationality <-as.factor(acs$Nationality)
acs$TripPurpose <-as.factor(acs$TripPurpose)
acs$ProvinceResidence <-as.factor(acs$ProvinceResidence)
acs$GroupTravel <-as.factor(acs$GroupTravel)
acs$Destination <-as.factor(acs$Destination)
acs$DepartureTime <-as.factor(acs$DepartureTime)
acs$SeatClass <-as.factor(acs$SeatClass)
acs$ModeTransport <-as.factor(acs$ModeTransport)
acs$Occupation <-as.factor(acs$Occupation)
acs$Income <-as.factor(acs$Income)
summary(acs)
# Missing Values
# Remove
acs <- acs[!is.na(acs$Age),]
acs <- acs[!is.na(acs$Airline),]
acs <- acs[!is.na(acs$Gender),]
acs <- acs[!is.na(acs$Destination),]
acs <- acs[!is.na(acs$SeatClass),]
# Replace numerical variables' NAs with means by groups
## Get means by groups
acs_airfare_na <- acs %>%
group_by(Airport, Airline, Destination) %>%
dplyr::summarize(Airfare = mean(Airfare, na.rm=TRUE))
acs_accesscost_na <- acs %>%
group_by(Airport, ProvinceResidence, AccessTime) %>%
dplyr::summarize(AccessCost = mean(AccessCost, na.rm=TRUE))
acs_accesscost_na2 <- acs %>%
group_by(Airport, ProvinceResidence) %>%
dplyr::summarize(AccessCost = mean(AccessCost, na.rm=TRUE))
# Export data for manually imputing NAs
#write.csv(acs, file = "acs_na.csv")
# Read acs_na
acs_na <- read.csv('acs_na.csv')
acs_na$Age <- as.factor(acs$Age)
acs_na$Airport <- as.factor(acs$Airport)
acs_na$Airline <- as.factor(acs$Airline)
acs_na$Gender <- as.factor(acs$Gender)
acs_na$Nationality <-as.factor(acs$Nationality)
acs_na$TripPurpose <-as.factor(acs$TripPurpose)
acs_na$ProvinceResidence <-as.factor(acs$ProvinceResidence)
acs_na$GroupTravel <-as.factor(acs$GroupTravel)
acs_na$Destination <-as.factor(acs$Destination)
acs_na$DepartureTime <-as.factor(acs$DepartureTime)
acs_na$SeatClass <-as.factor(acs$SeatClass)
acs_na$ModeTransport <-as.factor(acs$ModeTransport)
acs_na$Occupation <-as.factor(acs$Occupation)
acs_na$Income <-as.factor(acs$Income)
# Remove NAs in airfare
acs_na <- acs_na[!is.na(acs_na$Airfare),]
acs_na <- acs_na[!is.na(acs_na$AccessCost),]
# 468 observations
summary(acs_na)
# Regroup NAs in categorical variables (Income Millon Won)
acs_na[21] <- ifelse(acs_na[21] == 1, '<=30',
(ifelse(acs_na[21] == 2, '30~80',
(ifelse(acs_na[21] == 3, '30~80',
(ifelse(acs_na[21] == 4, '80~150',
(ifelse(acs_na[21] == 5, '80~150',
(ifelse(acs_na[21] == 'NA', 'NA','150~200>')))))))))))
acs_na$Income[is.na(acs_na$Income)] <- 0
acs_na$Income <- acs_na$Income %>% as.factor()
anyNA(acs_na)
summary(acs_na)
# check observation numbers first! too low? dont drop
# Outliers - numerical
outlier(acs_na$TripDuration)
outlier(acs_na$FlyingCompanion)
outlier(acs_na$NoTripsLastYear)
outlier(acs_na$Airfare)
outlier(acs_na$NoTransport)
outlier(acs_na$AccessCost)
outlier(acs_na$AccessTime)
# Remove Outliers
acs_out <- acs_na %>%
filter(TripDuration != 730,FlyingCompanion != 34,NoTransport != 4, AccessCost != 350000, AccessTime != 390)
# Data Vis
## Categorical
airport <- acs_out %>%
group_by(Airport) %>%
summarise(count= n())
airline <- acs_out %>%
group_by(Airline) %>%
summarise(count= n())
age <- acs_out %>%
group_by(Age) %>%
summarise(count= n())
gender <- acs_out %>%
group_by(Gender) %>%
summarise(count= n())
nationality <- acs_out %>%
group_by(Nationality) %>%
summarise(count= n())
trippurpose <- acs_out %>%
group_by(TripPurpose) %>%
summarise(count= n())
provinceresidence <- acs_out %>%
group_by(ProvinceResidence) %>%
summarise(count= n())
grouptravel <- acs_out %>%
group_by(GroupTravel) %>%
summarise(count= n())
destination <- acs_out %>%
group_by(Destination) %>%
summarise(count= n())
departuretime <- acs_out %>%
group_by(DepartureTime) %>%
summarise(count= n())
seatclass <- acs_out %>%
group_by(SeatClass) %>%
summarise(count= n())
modetrans <- acs_out %>%
group_by(ModeTransport) %>%
summarise(count= n())
occupation <- acs_out %>%
group_by(Occupation) %>%
summarise(count= n())
income <- acs_out %>%
group_by(Income) %>%
summarise(count= n())
grid.arrange(
airport %>%
ggplot(aes(x = Airport, y = count)) +
geom_bar(stat = 'identity'),
age %>%
ggplot(aes(x = Age, y = count)) +
geom_bar(stat = 'identity'),
airline %>%
ggplot(aes(x = Airline, y = count)) +
geom_bar(stat = 'identity'),
gender %>%
ggplot(aes(x = Gender, y = count)) +
geom_bar(stat = 'identity'),
nationality %>%
ggplot(aes(x = Nationality, y = count)) +
geom_bar(stat = 'identity'),
trippurpose %>%
ggplot(aes(x = TripPurpose, y = count)) +
geom_bar(stat = 'identity'),
provinceresidence %>%
ggplot(aes(x = ProvinceResidence, y = count)) +
geom_bar(stat = 'identity'),
grouptravel %>%
ggplot(aes(x = GroupTravel, y = count)) +
geom_bar(stat = 'identity'),
destination %>%
ggplot(aes(x = Destination, y = count)) +
geom_bar(stat = 'identity'),
departuretime %>%
ggplot(aes(x = DepartureTime, y = count)) +
geom_bar(stat = 'identity'),
seatclass %>%
ggplot(aes(x = SeatClass, y = count)) +
geom_bar(stat = 'identity'),
modetrans %>%
ggplot(aes(x = ModeTransport, y = count)) +
geom_bar(stat = 'identity'),
occupation %>%
ggplot(aes(x = Occupation, y = count)) +
geom_bar(stat = 'identity'),
income %>%
ggplot(aes(x = Income, y = count)) +
geom_bar(stat = 'identity'),
ncol = 4
)
# Categorical Variables - Airport
# Airports distrubution is equivalent
grid.arrange(
acs_out %>%
ggplot(aes(Airline,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Gender,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Age,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Nationality, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(TripPurpose, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ProvinceResidence, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(GroupTravel,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Destination, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(DepartureTime, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(SeatClass, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ModeTransport, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Occupation, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Income, fill = Airport)) +
geom_bar(position = "dodge"),
ncol = 3
)
# Categorical Variables - Airline
# Airline distribution is skewed: percentage
grid.arrange(
acs_out %>%
ggplot(aes(Airport,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Gender,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Age,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Nationality, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(TripPurpose, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ProvinceResidence, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(GroupTravel,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Destination, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(DepartureTime, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(SeatClass, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ModeTransport, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Occupation, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Income, fill = Airline)) +
geom_bar(position = "dodge"),
ncol = 3
)
# Airline Model
acs_al <- acs_out
# Numerical
grid.arrange(
acs_out %>%
ggplot(aes(TripDuration)) +
geom_histogram(),
acs_out %>%
ggplot(aes(FlyingCompanion)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTripsLastYear)) +
geom_histogram(),
acs_out %>%
ggplot(aes(Airfare)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTransport)) +
geom_histogram(),
acs_out %>%
ggplot(aes(AccessCost)) +
geom_histogram(),
acs_out %>%
ggplot(aes(AccessTime)) +
geom_histogram(),
ncol = 2
)
# Correlation plot
cor_plot <- acs_out %>%
select(TripDuration, FlyingCompanion, NoTripsLastYear, NoTransport, Airfare, AccessCost, AccessTime)
cor_plot %>%
ggpairs()
# airline with all numerical variables
airline_num <- acs_al %>%
group_by(Airline) %>%
summarise(count = n(),
mean_tripdu = mean(TripDuration),
mean_flycom = mean(FlyingCompanion),
mean_notrip = mean(NoTripsLastYear),
mean_airfare = mean(Airfare),
mean_noTrans = mean(NoTransport),
mean_accessc = mean(AccessCost),
mean_accesst = mean(AccessTime)
) %>%
arrange(desc(count))
airline_num
airline_num_table <- kable(airline_num) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
airline_num_table
# airport with all numerical variables
airport_num <- acs_ap %>%
group_by(Airport) %>%
summarise(count = n(),
mean_tripdu = mean(TripDuration),
mean_flycom = mean(FlyingCompanion),
mean_notrip = mean(NoTripsLastYear),
mean_airfare = mean(Airfare),
mean_noTrans = mean(NoTransport),
mean_accessc = mean(AccessCost),
mean_accesst = mean(AccessTime)
) %>%
arrange(desc(count))
# airport with all numerical variables
airport_num <- acs_ap %>%
group_by(Airport) %>%
summarise(count = n(),
mean_tripdu = mean(TripDuration),
mean_flycom = mean(FlyingCompanion),
mean_notrip = mean(NoTripsLastYear),
mean_airfare = mean(Airfare),
mean_noTrans = mean(NoTransport),
mean_accessc = mean(AccessCost),
mean_accesst = mean(AccessTime)
) %>%
arrange(desc(count))
# airline with all numerical variables
airline_num <- acs_al %>%
group_by(Airline) %>%
summarise(count = n(),
mean_tripdu = mean(TripDuration),
mean_flycom = mean(FlyingCompanion),
mean_notrip = mean(NoTripsLastYear),
mean_airfare = mean(Airfare),
mean_noTrans = mean(NoTransport),
mean_accessc = mean(AccessCost),
mean_accesst = mean(AccessTime)
) %>%
arrange(desc(count))
airline_num
airline_num_table <- kable(airline_num) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
airline_num_table
# airport with all numerical variables
airport_num <- acs_ap %>%
group_by(Airport) %>%
summarise(count = n(),
mean_tripdu = mean(TripDuration),
mean_flycom = mean(FlyingCompanion),
mean_notrip = mean(NoTripsLastYear),
mean_airfare = mean(Airfare),
mean_noTrans = mean(NoTransport),
mean_accessc = mean(AccessCost),
mean_accesst = mean(AccessTime)
) %>%
arrange(desc(count))
# Write CSV in R
## Airport Model data
write.csv(acs_ap, file = "acs_ap.csv")
## Model fitting and evaluation
#70/30 Train/Test Split
install.packages('caret')
library(caret)
install.packages("caret")
install.packages("caret")
## Model fitting and evaluation
#70/30 Train/Test Split
install.packages('caret')
library(caret)
library(caret)
## Logistic Regression
# find out how the raw features perform.
Airport.logit.1 <- glm(Airport ~., data = train.set, family=binomial("logit"))
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(GGally)
library(ggplot2)
library(readxl)
library(kableExtra)
library(gridExtra)
library(outliers)
library(Hmisc)
library(DMwR)
library(here)
library(dplyr)
## Logistic Regression for Airline
# find out how the raw features perform.
Airline.logit.1 <- glm(Airline ~., data = train.set, family=binomial("logit"))
## Logistic Regression for Airport
# find out how the raw features perform.
Airport.logit.1 <- glm(Airport ~., data = train.set, family=binomial("logit"))
## Model fitting and evaluation
#70/30 Train/Test Split for Airport
install.packages('caret')
library(caret)
set.seed(666)
trainrows<-createDataPartition(acs_ap$Airport, p = 0.7, list=FALSE)
