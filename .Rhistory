geom_histogram(),
acs_out %>%
ggplot(aes(Age)) +
geom_histogram(),
acs_out %>%
ggplot(aes(FlyingCompanion)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTripsLastYear)) +
geom_histogram(),
acs_out %>%
ggplot(aes(Airfare)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTransport)) +
geom_histogram(),
acs_out %>%
ggplot(aes(AccessTime)) +
geom_histogram(),
ncol = 2
)
# Correlation plot
cor_plot <- subset(acs_out, select = c(TripDuration, FlyingCompanion, NoTripsLastYear, NoTransport, Airfare, AccessTime))
cor_plot %>%
ggpairs()
# Reference Category
acs_ap[1] <- ifelse(acs_ap[1] == 1, 'ICN','GMP')
acs_ap$Airport <- as.factor(acs_ap$Airport)
contrasts(acs_ap$Airport) # ICN = 1, GMP = 0
# Sampling 70/30
library(caret)
set.seed(666)
trainrows<-createDataPartition(acs_ap$Airport, p = 0.7, list=FALSE)
train_set_ap<-acs_ap[trainrows,]
test_set_ap<-acs_ap[-trainrows,]
# write.csv(train_set_ap, file = "train_airport.csv")
# write.csv(test_set_ap, file = "test_airport.csv")
# Logistic 1
# first model -- before ANOVA
ap_logit_1 <- glm(Airport ~., data = train_set_ap, family=binomial("logit"))
print(ap_logit_1)
summary(ap_logit_1)
anova(ap_logit_1, test="Chisq")
#Remove variables after Anova Analysis
train_set_ap2 <- subset(train_set_ap, select = -c(TripDuration, Airfare, FlyingCompanion, TripPurpose, Age))
#Remove variables after Anova Analysis
train_set_ap2 <- subset(train_set_ap, select = -c(TripDuration, Airfare, FlyingCompanion, TripPurpose, Age))
null = glm(Airport ~ 1, data = train_set_ap2, family=binomial("logit"))
full = glm(Airport ~., data = train_set_ap2, family=binomial("logit"))
step(null, scope = list(lower=null,upper=full),
direction="both", criterion = "BIC")
# Airport Model
ap_logit_2 <- glm(Airport ~ Destination + DepartureTime + Income +
Nationality + Airline + FrequentFlightDestination + ModeTransport +
Occupation + ProvinceResidence + AccessTime, data = train_set_ap2, family=binomial("logit"))
summary(ap_logit_2)
# Prediction
#test_set_ap2 <- subset(test_set_ap, select = -c(TripDuration, Airfare, FlyingCompanion, AccessTime))
predicted <- plogis(predict(ap_logit_2, test_set_ap))
pred <- ifelse(predicted > 0.5, "ICN", "GMP")
pred <- as.factor(pred)
confusionMatrix(test_set_ap$Airport, pred)
install.packages('e1071', dependencies=TRUE)
# Prediction
#test_set_ap2 <- subset(test_set_ap, select = -c(TripDuration, Airfare, FlyingCompanion, AccessTime))
predicted <- plogis(predict(ap_logit_2, test_set_ap))
pred <- ifelse(predicted > 0.5, "ICN", "GMP")
pred <- as.factor(pred)
confusionMatrix(test_set_ap$Airport, pred)
library(pscl)
install.packages("pscl")
library(pscl)
pR2(ap_logit_2)
train_control <- trainControl(method='cv', number = 4)
model <- train(Airport ~., data = train_set_ap2, trControl = train_control, method="glm", family="binomial")
pred_k <- predict(model, newdata=test_set_ap)
confusionMatrix(data=pred_k, test_set_ap$Airport)
acs_al$Airline <- relevel(acs_al$Airline, ref=1)
# Sampling 70/30
library(caret)
set.seed(666)
trainrows_al<-createDataPartition(acs_al$Airline, p = 0.7, list=FALSE)
train_set_al<-acs_al[trainrows_al,]
test_set_al<-acs_al[-trainrows_al,]
# write.csv(train_set_al, file = "train_airline.csv")
# write.csv(test_set_ap, file = "test_airline.csv")
# Multinomial Logistic 1
# first model -- before ANOVA
#install.packages('nnet')
library(nnet)
al_logit_1 <- multinom(Airline ~., data = train_set_al)
print(al_logit_1)
summary(al_logit_1)
summary(al_logit_1)$coefficients
summary(al_logit_1)$standard.errors
zvalues <- summary(al_logit_1)$coefficients / summary(al_logit_1)$standard.errors
pnorm(abs(zvalues), lower.tail=FALSE)*2
# Prediction
predicted_al <- predict (al_logit_1, test_set_al, "probs")
pred_al <- predict(al_logit_1, test_set_al)
confusionMatrix(test_set_al$Airline, pred_al)
# Prediction
predicted_al <- predict (al_logit_1, test_set_al, "probs")
pred_al <- predict(al_logit_1, test_set_al)
confusionMatrix(test_set_al$Airline, pred_al)
library(pscl)
pR2(al_logit_1)
library(pscl)
pR2(al_logit_1)
train_control <- trainControl(method='cv', number = 4)
model_al <- train(Airline ~., data = train_set_al, trControl = train_control, method="multinom")
pred_k_al <- predict(model_al, newdata=test_set_al)
confusionMatrix(data=pred_k_al, test_set_al$Airline)
null_al = multinom(Airline ~ 1, data = train_set_al)
full_al = multinom(Airline ~., data = train_set_al)
step(null_al, scope = list(lower=null_al,upper=full_al),
direction="both", criterion = "BIC")
al_logit_2 <- multinom(Airline ~ Destination + Airfare + ProvinceResidence +
Airport + NoTransport + DepartureTime + FrequentFlightDestination +
TripDuration + NoTripsLastYear + FlyingCompanion, data = train_set_al)
print(al_logit_2)
summary(al_logit_2)
# Prediction
predicted_al <- predict (al_logit_2, test_set_al, "probs")
pred_al <- predict(al_logit_2, test_set_al)
confusionMatrix(test_set_al$Airline, pred_al)
train1 <- window(visnights[, "QLDMetro"], end = c(2015,4))
train2 <- window(visnights[, "QLDMetro"], end = c(2014,4))
train3 <- window(visnights[, "QLDMetro"], end = c(2013,4))
test1 <- window(visnights[, "QLDMetro"], start = c(2016,1),end = c(2016,4))
test2 <- window(visnights[, "QLDMetro"], start = c(2015,1),end = c(2016,4))
test3 <- window(visnights[, "QLDMetro"], start = c(2014,1),end = c(2016,4))
install.packages("fpp2")
library(fpp2)
train1 <- window(visnights[, "QLDMetro"], end = c(2015,4))
train2 <- window(visnights[, "QLDMetro"], end = c(2014,4))
train3 <- window(visnights[, "QLDMetro"], end = c(2013,4))
test1 <- window(visnights[, "QLDMetro"], start = c(2016,1),end = c(2016,4))
test2 <- window(visnights[, "QLDMetro"], start = c(2015,1),end = c(2016,4))
test3 <- window(visnights[, "QLDMetro"], start = c(2014,1),end = c(2016,4))
fc1 <- snaive(train1,h=4)
fc2 <- snaive(train2,h=4)
fc3 <- snaive(train3,h=4)
accuracy(fc1, test1) # MAPE = 6.16
accuracy(fc2, test2) # MAPE = 3.06
accuracy(fc3, test3) # MAPE = 8.48
# Clear environment of variables and functions
rm(list = ls(all = TRUE))
# Clear environmet of packages
if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste("package:", names(sessionInfo()$otherPkgs), sep=""), detach, character.only = TRUE, unload = TRUE)
library(tidyverse)
library(GGally)
library(ggplot2)
#library(readxl)
library(kableExtra)
library(gridExtra)
library(outliers)
library(Hmisc)
library(DMwR)
#library(here)
library(dplyr)
# Load data
## CSV file
acs <- read.csv('airport_choice_survey_modified.csv')
# Remove unwanted variables: FlightNo, DepartureHr, DepartureMn, Mileage, MileageAireline
acs <- acs[ , -c(14:16,22,26,27) ]
# Convert data type
acs$Airport <- as.factor(acs$Airport)
acs$Airline <- as.factor(acs$Airline)
acs$Gender <- as.factor(acs$Gender)
acs$Nationality <-as.factor(acs$Nationality)
acs$TripPurpose <-as.factor(acs$TripPurpose)
acs$ProvinceResidence <-as.factor(acs$ProvinceResidence)
acs$GroupTravel <-as.factor(acs$GroupTravel)
acs$Destination <-as.factor(acs$Destination)
acs$FrequentFlightDestination <- as.factor(acs$FrequentFlightDestination)
acs$DepartureTime <-as.factor(acs$DepartureTime)
acs$SeatClass <-as.factor(acs$SeatClass)
acs$ModeTransport <-as.factor(acs$ModeTransport)
acs$Occupation <-as.factor(acs$Occupation)
acs$Income <-as.factor(acs$Income)
summary(acs)
# Missing Values
# Remove
acs <- acs[!is.na(acs$Age),]
acs <- acs[!is.na(acs$Airline),]
acs <- acs[!is.na(acs$Gender),]
acs <- acs[!is.na(acs$Destination),]
acs <- acs[!is.na(acs$SeatClass),]
# Replace Airfare NAs with means by groups
acs_na <- acs %>%
group_by(Airport, Airline, Destination) %>%
mutate_each(funs(replace(., which(is.na(.)), mean(., na.rm=TRUE))),
starts_with('Airfare'))
#summary(acs_na$Airfare)
# Regroup NAs in categorical variables (Income Millon Won)
acs_na[21] <- ifelse(acs_na[21] == 1, '<=30',
(ifelse(acs_na[21] == 2, '30~150',
(ifelse(acs_na[21] == 3, '30~150',
(ifelse(acs_na[21] == 4, '30~150',
(ifelse(acs_na[21] == 5, '30~150',
(ifelse(acs_na[21] == 'NA', 'NA','150~200>')))))))))))
acs_na$Income[is.na(acs_na$Income)] <- '00'
acs_na$Income <- acs_na$Income %>% as.factor()
acs_na$Income = factor(acs_na$Income,levels(acs_na$Income)[c(2,1,4,3)])
# Remove NA in Airfare
acs_na <- acs_na[!is.na(acs_na$Airfare),]
summary(acs_na)
## Check NA
# anyNA(acs_na)
# Outliers - numerical
outlier(acs_na$TripDuration)
outlier(acs_na$FlyingCompanion)
outlier(acs_na$NoTripsLastYear)
outlier(acs_na$NoTransport)
outlier(acs_na$AccessTime)
# Remove Outliers
acs_out <- acs_na %>%
filter(TripDuration != 730,FlyingCompanion != 34,NoTripsLastYear != 122,NoTransport != 4, AccessTime != 390)
summary(acs_out)
# Data Vis
## Categorical
airport <- acs_out %>%
group_by(Airport) %>%
summarise(count= n())
airline <- acs_out %>%
group_by(Airline) %>%
summarise(count= n())
gender <- acs_out %>%
group_by(Gender) %>%
summarise(count= n())
nationality <- acs_out %>%
group_by(Nationality) %>%
summarise(count= n())
trippurpose <- acs_out %>%
group_by(TripPurpose) %>%
summarise(count= n())
provinceresidence <- acs_out %>%
group_by(ProvinceResidence) %>%
summarise(count= n())
grouptravel <- acs_out %>%
group_by(GroupTravel) %>%
summarise(count= n())
freqdes <- acs_out %>%
group_by(FrequentFlightDestination) %>%
summarise(count= n())
destination <- acs_out %>%
group_by(Destination) %>%
summarise(count= n())
departuretime <- acs_out %>%
group_by(DepartureTime) %>%
summarise(count= n())
seatclass <- acs_out %>%
group_by(SeatClass) %>%
summarise(count= n())
modetrans <- acs_out %>%
group_by(ModeTransport) %>%
summarise(count= n())
occupation <- acs_out %>%
group_by(Occupation) %>%
summarise(count= n())
income <- acs_out %>%
group_by(Income) %>%
summarise(count= n())
grid.arrange(
airport %>%
ggplot(aes(x = Airport, y = count)) +
geom_bar(stat = 'identity'),
airline %>%
ggplot(aes(x = Airline, y = count)) +
geom_bar(stat = 'identity'),
gender %>%
ggplot(aes(x = Gender, y = count)) +
geom_bar(stat = 'identity'),
nationality %>%
ggplot(aes(x = Nationality, y = count)) +
geom_bar(stat = 'identity'),
trippurpose %>%
ggplot(aes(x = TripPurpose, y = count)) +
geom_bar(stat = 'identity'),
provinceresidence %>%
ggplot(aes(x = ProvinceResidence, y = count)) +
geom_bar(stat = 'identity'),
grouptravel %>%
ggplot(aes(x = GroupTravel, y = count)) +
geom_bar(stat = 'identity'),
freqdes %>%
ggplot(aes(x = FrequentFlightDestination, y = count)) +
geom_bar(stat = 'identity'),
destination %>%
ggplot(aes(x = Destination, y = count)) +
geom_bar(stat = 'identity'),
departuretime %>%
ggplot(aes(x = DepartureTime, y = count)) +
geom_bar(stat = 'identity'),
seatclass %>%
ggplot(aes(x = SeatClass, y = count)) +
geom_bar(stat = 'identity'),
modetrans %>%
ggplot(aes(x = ModeTransport, y = count)) +
geom_bar(stat = 'identity'),
occupation %>%
ggplot(aes(x = Occupation, y = count)) +
geom_bar(stat = 'identity'),
income %>%
ggplot(aes(x = Income, y = count)) +
geom_bar(stat = 'identity'),
ncol = 4
)
# Categorical Variables - Airport
# Airports distrubution is equivalent
grid.arrange(
acs_out %>%
ggplot(aes(Airline,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Gender,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Nationality, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(TripPurpose, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ProvinceResidence, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(GroupTravel,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(FrequentFlightDestination,fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Destination, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(DepartureTime, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(SeatClass, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ModeTransport, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Occupation, fill = Airport)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Income, fill = Airport)) +
geom_bar(position = "dodge"),
ncol = 3
)
# drop variables
# Airport Model
acs_ap <- subset(acs_out, select = -c(Gender, GroupTravel, SeatClass))
# Regroup
acs_ap[2] <- ifelse(acs_ap[2] == 1, 'Korean',
ifelse(acs_ap[2] == 2, 'Korean',
ifelse(acs_ap[2] == 3, 'LCC', 'Foreign')))
acs_ap[4] <- ifelse(acs_ap[4] == 1, 'Korean', 'Foreign')
acs_ap[17] <- ifelse(acs_ap[17] == 1, 'w/income',
ifelse(acs_ap[17] == 2, 'w/income',
ifelse(acs_ap[17] == 3, 'w/income',
ifelse(acs_ap[17] == 4, 'w/income',
ifelse(acs_ap[17] == 5, 'w/income',
ifelse(acs_ap[17] == 6, 'w/income',
ifelse(acs_ap[17] == 7, 'w/income',
ifelse(acs_ap[17] == 12, 'Other', 'no income'))))))))
acs_ap[11] <- ifelse(acs_ap[11] == 1, 'China',
ifelse(acs_ap[11] == 2, 'Japan', 'Other'))
acs_ap[5] <- ifelse(acs_ap[5] == 1, 'Leisure','Other')
acs_ap[10] <- ifelse(acs_ap[10] == 1, 'SA',
ifelse(acs_ap[10] == 2, 'China',
ifelse(acs_ap[10] == 3, 'Japan', 'Others')))
# Categorical Variables - Airline
grid.arrange(
acs_out %>%
ggplot(aes(Airport,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Gender,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Nationality, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(TripPurpose, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ProvinceResidence, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(GroupTravel,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(FrequentFlightDestination,fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Destination, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(DepartureTime, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(SeatClass, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(ModeTransport, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Occupation, fill = Airline)) +
geom_bar(position = "dodge"),
acs_out %>%
ggplot(aes(Income, fill = Airline)) +
geom_bar(position = "dodge"),
ncol = 3
)
# drop variables
# Airport Model
acs_al <- subset(acs_out, select = -c(GroupTravel))
# drop variables
# Airport Model
acs_al <- subset(acs_out, select = -c(GroupTravel))
# Regroup
acs_al[5] <- ifelse(acs_al[5] == 1, 'Korean', 'Foreign')
acs_al[6] <- ifelse(acs_al[6] == 1, 'Leisure','Other')
acs_al[11] <- ifelse(acs_al[11] == 1, 'SA',
ifelse(acs_al[11] == 2, 'China',
ifelse(acs_al[11] == 3, 'Japan', 'Others')))
acs_al[14] <- ifelse(acs_al[14] == 1, 'Economic','Other')
# Numerical
grid.arrange(
acs_out %>%
ggplot(aes(TripDuration)) +
geom_histogram(),
acs_out %>%
ggplot(aes(Age)) +
geom_histogram(),
acs_out %>%
ggplot(aes(FlyingCompanion)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTripsLastYear)) +
geom_histogram(),
acs_out %>%
ggplot(aes(Airfare)) +
geom_histogram(),
acs_out %>%
ggplot(aes(NoTransport)) +
geom_histogram(),
acs_out %>%
ggplot(aes(AccessTime)) +
geom_histogram(),
ncol = 2
)
# Correlation plot
cor_plot <- subset(acs_out, select = c(TripDuration, FlyingCompanion, NoTripsLastYear, NoTransport, Airfare, AccessTime))
cor_plot %>%
ggpairs()
# Reference Category
acs_ap[1] <- ifelse(acs_ap[1] == 1, 'ICN','GMP')
acs_ap$Airport <- as.factor(acs_ap$Airport)
contrasts(acs_ap$Airport) # ICN = 1, GMP = 0
# Sampling 70/30
library(caret)
set.seed(666)
trainrows<-createDataPartition(acs_ap$Airport, p = 0.7, list=FALSE)
train_set_ap<-acs_ap[trainrows,]
test_set_ap<-acs_ap[-trainrows,]
# write.csv(train_set_ap, file = "train_airport.csv")
# write.csv(test_set_ap, file = "test_airport.csv")
# Logistic 1
# first model -- before ANOVA
ap_logit_1 <- glm(Airport ~., data = train_set_ap, family=binomial("logit"))
print(ap_logit_1)
summary(ap_logit_1)
anova(ap_logit_1, test="Chisq")
#Remove variables after Anova Analysis
train_set_ap2 <- subset(train_set_ap, select = -c(TripDuration, Airfare, FlyingCompanion, TripPurpose, Age))
null = glm(Airport ~ 1, data = train_set_ap2, family=binomial("logit"))
full = glm(Airport ~., data = train_set_ap2, family=binomial("logit"))
step(null, scope = list(lower=null,upper=full),
direction="both", criterion = "BIC")
# Airport Model
ap_logit_2 <- glm(Airport ~ Destination + DepartureTime + Income +
Nationality + Airline + FrequentFlightDestination + ModeTransport +
Occupation + ProvinceResidence + AccessTime, data = train_set_ap2, family=binomial("logit"))
summary(ap_logit_2)
# Prediction
#test_set_ap2 <- subset(test_set_ap, select = -c(TripDuration, Airfare, FlyingCompanion, AccessTime))
predicted <- plogis(predict(ap_logit_2, test_set_ap))
pred <- ifelse(predicted > 0.5, "ICN", "GMP")
pred <- as.factor(pred)
confusionMatrix(test_set_ap$Airport, pred)
library(pscl)
pR2(ap_logit_2)
train_control <- trainControl(method='cv', number = 4)
model <- train(Airport ~., data = train_set_ap2, trControl = train_control, method="glm", family="binomial")
pred_k <- predict(model, newdata=test_set_ap)
confusionMatrix(data=pred_k, test_set_ap$Airport)
acs_al$Airline <- relevel(acs_al$Airline, ref=1)
# Sampling 70/30
library(caret)
set.seed(666)
trainrows_al<-createDataPartition(acs_al$Airline, p = 0.7, list=FALSE)
train_set_al<-acs_al[trainrows_al,]
test_set_al<-acs_al[-trainrows_al,]
# write.csv(train_set_al, file = "train_airline.csv")
# write.csv(test_set_ap, file = "test_airline.csv")
View(test_set_al)
View(train_set_al)
